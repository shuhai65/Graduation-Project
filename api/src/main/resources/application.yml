project:
  environment: pro
  name: aquarium
logging:
  level:
    RocketmqClient: ERROR
    io:
      netty: ERROR

spring:

  # 发送者邮箱相关配置
  mail:
    # SMTP服务器域名
    host: smtp.163.com
    # 编码集
    default-encoding: UTF-8
    # 邮箱用户名
    username: examboost@163.com
    # 授权码(注意不是邮箱密码！)
    password: NDINJDWHQUYJBOML
    # 协议：smtps
    protocol: smtps
    # 详细配置
    properties:
      mail:
        smtp:
          # 设置是否需要认证,如果为true,那么用户名和密码就必须的,
          # 如果设置false,可以不设置用户名和密码
          # (前提要知道对接的平台是否支持无密码进行访问的)
          auth: true
          # STARTTLS[1]  是对纯文本通信协议的扩展。
          # 它提供一种方式将纯文本连接升级为加密连接（TLS或SSL）
          # 而不是另外使用一个端口作加密通信。
          starttls:
            enable: true
            required: true
  security:
    user:
      name: scau
      password: 123456
  datasource:
    username: root
    password: 1234
    url: jdbc:mysql://localhost:3306/aquarium_system?useUnicode=true&&useSSL=false&serverTimezone=GMT%2B8&&allowPublicKeyRetrieval=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
  druid:
    initial-size: 10 # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
    min-idle: 10 # 最小连接池数量
    maxActive: 200 # 最大连接池数量
    maxWait: 60000 # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置
    timeBetweenEvictionRunsMillis: 60000 # 关闭空闲连接的检测时间间隔.Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
    minEvictableIdleTimeMillis: 300000 # 连接的最小生存时间.连接保持空闲而不被驱逐的最小时间
    validationQuery: SELECT 1 FROM DUAL # 验证数据库服务可用性的sql.用来检测连接是否有效的sql 因数据库方言而差, 例如 oracle 应该写成 SELECT 1 FROM DUAL
    testWhileIdle: true # 申请连接时检测空闲时间，根据空闲时间再检测连接是否有效.建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRun
    testOnBorrow: false # 申请连接时直接检测连接是否有效.申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    testOnReturn: false # 归还连接时检测连接是否有效.归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    poolPreparedStatements: true # 开启PSCache
    maxPoolPreparedStatementPerConnectionSize: 20 #设置PSCache值
    connectionErrorRetryAttempts: 3 # 连接出错后再尝试连接三次
    breakAfterAcquireFailure: true # 数据库服务宕机自动重连机制
    timeBetweenConnectErrorMillis: 300000 # 连接出错后重试时间间隔
    asyncInit: true # 异步初始化策略
    remove-abandoned: true # 是否自动回收超时连接
    remove-abandoned-timeout: 1800 # 超时时间(以秒数为单位)
    transaction-query-timeout: 6000 # 事务超时时间
    filters: stat,wall,log4j2
    connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
    web-stat-filter:
      enabled: true
      url-pattern: "/*"
      exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
    stat-view-servlet:
      url-pattern: "/druid/*"
      allow:
      deny:
      reset-enable: false
      login-username: admin
      login-password: admin
  #Redis相关配置
  redis:
    host: localhost
    port: 6379
  cache:
    redis:
      time-to-live: 1800000 #缓存过期时间，单位毫秒
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER
  profiles:
    active: pro
    group:
      #开发环境
      "dev": dev
      #生产环境
      "pro": pro
  web:
    resources:
      chain:
        strategy:
          content:
            enabled: true
            paths: /**
knife4j:
  enable: true
  setting:
    language: zh-CN
    swagger-model-name: 实体类列表

jwt:
  secret_key: aquarium
  expiration_time: 259200

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: edu.scau.client.model
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

token_exclude:
  path: /error,/actuator,/swagger-ui.html,/swagger-resources,/webjars,/v2,/v3,/doc.html,/favicon.ico,/csrf,/image,/user

custom: # 自定义http启动端口
  http-port: 8080
server:
  port: 8080    #HTTPS协议默认端口号为443，需要使用其他端口时，您可以在此处自定义。

rocketmq:
  consumer:
    group: springboot_consumer_group
    # 一次拉取消息最大值，注意是拉取消息的最大值而非消费最大值
    pull-batch-size: 10
  name-server: 127.0.0.1:9876
  producer:
    # 发送同一类消息的设置为同一个group，保证唯一
    group: springboot_producer_group
    # 发送消息超时时间，默认3000
    sendMessageTimeout: 10000
    # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    # 异步消息重试此处，默认2
    retryTimesWhenSendAsyncFailed: 2
    # 消息最大长度，默认1024 * 1024 * 4(默认4M)
    maxMessageSize: 4096
    # 压缩消息阈值，默认4k(1024 * 4)
    compressMessageBodyThreshold: 4096
    # 是否在内部发送失败时重试另一个broker，默认false
    retryNextServer: false
